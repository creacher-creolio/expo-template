---
description: error handling and validation
globs:
alwaysApply: false
---
- Use Zod for runtime type validation and schema definition
- Implement proper try/catch blocks for async operations
- Create custom error boundaries for critical components
- Use early returns for error conditions to avoid deep nesting
- Implement user-friendly error messages and recovery options
- Log errors to monitoring services (e.g., Sentry) in production
- Create custom error components with appropriate visual feedback
- Handle network errors gracefully with retry mechanisms
- Validate form inputs with clear feedback messages
- [forms.mdc](mdc:.cursor/rules/forms.mdc)
- Implement fallback UI for error states
- Test error cases thoroughly in unit and integration tests
