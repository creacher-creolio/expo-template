---
description: Typescript
globs: *.ts,*.tsx
alwaysApply: false
---
- Use explicit return types for non-trivial functions
- Define proper interfaces for component props and state
- Create dedicated type files (types.ts) for shared types
- Prefer interfaces over types for object shapes
- Avoid any type; use unknown for truly dynamic values
- Use type guards for narrowing types (is, as, in)
- Leverage TypeScript utility types (Partial, Pick, Omit, etc.)
- Use optional chaining (?.) and nullish coalescing (??)
- Create reusable, generic components with proper typing
- Implement proper error typing for try/catch blocks
- Use strict null checks and non-null assertion with caution
